/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.8
 * Generated at: 2025-01-04 14:38:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import com.foodapp.model.*;

public final class menu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("com.foodapp.model");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"ISO-8859-1\">\r\n");
      out.write("	<title>Menu</title>\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\">\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"./styles/menu.css\">\r\n");
      out.write("	<style>\r\n");
      out.write("		\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');\r\n");
      out.write("@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css');\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("    font-family: 'Poppins', sans-serif;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    background-color: #2c3e50;\r\n");
      out.write("    padding: 15px 30px;\r\n");
      out.write("    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n");
      out.write("    transition: all 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar:hover {\r\n");
      out.write("    box-shadow: 0 4px 20px rgba(0,0,0,0.2);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-logo .logo {\r\n");
      out.write("    height: 40px;\r\n");
      out.write("    transition: transform 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-logo .logo:hover {\r\n");
      out.write("    transform: scale(1.05);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-search {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    background-color: #34495e;\r\n");
      out.write("    border-radius: 25px;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    transition: all 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-search:focus-within {\r\n");
      out.write("    box-shadow: 0 0 0 2px #3498db;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-search input {\r\n");
      out.write("    padding: 10px 15px;\r\n");
      out.write("    border: none;\r\n");
      out.write("    background-color: transparent;\r\n");
      out.write("    color: #ecf0f1;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    width: 200px;\r\n");
      out.write("    transition: width 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-search input:focus {\r\n");
      out.write("    width: 250px;\r\n");
      out.write("    outline: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-search input::placeholder {\r\n");
      out.write("    color: #bdc3c7;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-search .search-btn {\r\n");
      out.write("    padding: 10px 15px;\r\n");
      out.write("    background-color: #3498db;\r\n");
      out.write("    color: white;\r\n");
      out.write("    border: none;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-search .search-btn:hover {\r\n");
      out.write("    background-color: #2980b9;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-actions {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-actions button {\r\n");
      out.write("    margin-left: 15px;\r\n");
      out.write("    padding: 10px 15px;\r\n");
      out.write("    background-color: #3498db;\r\n");
      out.write("    color: white;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 25px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: all 0.3s ease;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-actions button:hover {\r\n");
      out.write("    background-color: #2980b9;\r\n");
      out.write("    transform: translateY(-2px);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".cart-btn, .profile-photo {\r\n");
      out.write("    background-color: transparent;\r\n");
      out.write("    border: none;\r\n");
      out.write("    color: #ecf0f1;\r\n");
      out.write("    font-size: 20px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: all 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".cart-btn:hover, .profile-photo:hover {\r\n");
      out.write("    color: #3498db;\r\n");
      out.write("    transform: scale(1.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".profile-photo {\r\n");
      out.write("    width: 40px;\r\n");
      out.write("    height: 40px;\r\n");
      out.write("    border-radius: 50%;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    margin-left: 15px;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("    background-color: #34495e;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("@keyframes fadeIn {\r\n");
      out.write("    from { opacity: 0; transform: translateY(-10px); }\r\n");
      out.write("    to { opacity: 1; transform: translateY(0); }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar {\r\n");
      out.write("    animation: fadeIn 0.5s ease-out;\r\n");
      out.write("}\r\n");
      out.write("	</style>\r\n");
      out.write("	\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <nav class=\"navbar\">\r\n");
      out.write("        <div class=\"navbar-logo\">\r\n");
      out.write("            <a href=\"#\"><img src=\"./logo/fast-food.png\" alt=\"Foodie Hub Logo\" class=\"logo\"></a>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"navbar-search\">\r\n");
      out.write("            <input type=\"text\" placeholder=\"Search Menu...\" id=\"search-box\">\r\n");
      out.write("            <button class=\"search-btn\">\r\n");
      out.write("                <i class=\"fas fa-search\"></i>\r\n");
      out.write("            </button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"navbar-actions\">\r\n");
      out.write("            <button class=\"cart-btn\">\r\n");
      out.write("                <a href=\"CartServlet\"><i class=\"fas fa-shopping-cart\"></i></a>\r\n");
      out.write("            </button>\r\n");
      out.write("            <div class=\"profile-photo\">\r\n");
      out.write("                <i class=\"fas fa-user\"></i>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </nav>\r\n");
      out.write("\r\n");
      out.write("    ");

        // Retrieve and cast the session attributes
        Restaurant restaurant = (Restaurant) session.getAttribute("restaurant");
    
      out.write("\r\n");
      out.write("    <h1>");
      out.print( restaurant.getName() );
      out.write("</h1>\r\n");
      out.write("    <h3>");
      out.print( restaurant.getAddress() );
      out.write("</h3>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"menu-container\">\r\n");
      out.write("        ");

            ArrayList<Menu> menu = (ArrayList<Menu>) session.getAttribute("menu");
            for (Menu m : menu) {
        
      out.write("\r\n");
      out.write("        <div class=\"menu-item\" data-name=\"");
      out.print( m.getName().toLowerCase() );
      out.write("\">\r\n");
      out.write("            <div class=\"menu-item-info\">\r\n");
      out.write("                <div class=\"menu-item-name\">");
      out.print( m.getName() );
      out.write("</div>\r\n");
      out.write("                <div class=\"menu-item-price\">&#8377;");
      out.print( m.getPrice() );
      out.write("</div>\r\n");
      out.write("                <div class=\"menu-item-description\">");
      out.print( m.getDescription() );
      out.write("</div>\r\n");
      out.write("                <div class=\"menu-item-status\">\r\n");
      out.write("                    ");
      out.print( m.isActive() ? "Available" : "Not Available" );
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"menu-item-image-container\">\r\n");
      out.write("                <img src=\"");
      out.print( m.getImagePath() );
      out.write("\" alt=\"");
      out.print( m.getName() );
      out.write("\" class=\"menu-item-image\">\r\n");
      out.write("                <form action=\"CartServlet\" method=\"get\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"action\" value=\"add\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"itemId\" value=\"");
      out.print( m.getMenuId() );
      out.write("\">\r\n");
      out.write("                    <input type=\"submit\" class=\"add-to-cart\" value=\"Add\">\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"no-results\" style=\"text-align: center; display: none;\">No results found.</div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        document.addEventListener(\"DOMContentLoaded\", () => {\r\n");
      out.write("            const searchBox = document.getElementById(\"search-box\");\r\n");
      out.write("            const menuItems = document.querySelectorAll(\".menu-item\");\r\n");
      out.write("            const noResults = document.getElementById(\"no-results\");\r\n");
      out.write("\r\n");
      out.write("            searchBox.addEventListener(\"input\", () => {\r\n");
      out.write("                const query = searchBox.value.toLowerCase().trim();\r\n");
      out.write("                let matches = 0;\r\n");
      out.write("\r\n");
      out.write("                menuItems.forEach(item => {\r\n");
      out.write("                    const name = item.getAttribute(\"data-name\");\r\n");
      out.write("                    if (name.includes(query)) {\r\n");
      out.write("                        item.style.display = \"flex\"; // Show matching items\r\n");
      out.write("                        matches++;\r\n");
      out.write("                    } else {\r\n");
      out.write("                        item.style.display = \"none\"; // Hide non-matching items\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                // Show or hide the \"No Results Found\" message\r\n");
      out.write("                noResults.style.display = matches ? \"none\" : \"block\";\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
